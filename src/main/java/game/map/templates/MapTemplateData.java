package game.map.templates;

public abstract class MapTemplateData
{
	protected static final Integer[] SHOW_GOT_X = {
			0x00000043, 0x00000004, 0x802D73A4, 0xFE363C80, 0x00000001, null, // got type
			0x00000002, 0x00000000,
			0x00000002, 0x00000000,
			0x00000001, 0x00000000
	};

	protected static final Integer[] EXIT_WALKOFF = {
			0x0000004D, 0x00000001, 0x0000001B,
			0x00000043, 0x00000003, 0x802D216C, 0x0000003C, null, // entry ID
			0x00000044, 0x00000001, 0x80285CF4,
			0x00000043, 0x00000003, 0x802CA400, null, null, // GotoMap: name and entry ID
			0x00000008, 0x00000001, 0x00000064, // always 100
			0x00000002, 0x00000000,
			0x00000001, 0x00000000
	};

	protected static final Integer[] EXIT_SINGLE_DOOR = {
			0x0000004D, 0x00000001, 0x0000001B,
			0x00000043, 0x00000002, 0x802D0E28, 0x00000001,
			0x00000043, 0x00000002, 0x802D6314, null, // #DoorSounds
			0x00000024, 0x00000002, 0xFE363C80, null, // entry ID
			0x00000024, 0x00000002, 0xFE363C81, null, // collider ID
			0x00000024, 0x00000002, 0xFE363C82, null, // model ID
			0x00000024, 0x00000002, 0xFE363C83, null, // #DoorSwing
			0x00000044, 0x00000001, 0x80285DAC,
			0x00000008, 0x00000001, 0x00000011, // always 17?
			0x00000043, 0x00000003, 0x802CA400, null, null, // GotoMap: name and entry ID
			0x00000008, 0x00000001, 0x00000064,
			0x00000002, 0x00000000,
			0x00000001, 0x00000000
	};

	protected static final Integer[] EXIT_DOUBLE_DOOR = {
			0x0000004D, 0x00000001, 0x0000001B,
			0x00000043, 0x00000002, 0x802D0E28, 0x00000001,
			0x00000043, 0x00000002, 0x802D6314, null, // #DoorSounds
			0x00000024, 0x00000002, 0xFE363C80, null, // entry ID
			0x00000024, 0x00000002, 0xFE363C81, null, // collider ID
			0x00000024, 0x00000002, 0xFE363C82, null, // model ID
			0x00000024, 0x00000002, 0xFE363C83, null, // model ID
			0x00000044, 0x00000001, 0x80285E4C,
			0x00000008, 0x00000001, 0x00000011, // always 17?
			0x00000043, 0x00000003, 0x802CA400, null, null, // GotoMap: name and entry ID
			0x00000008, 0x00000001, 0x00000064,
			0x00000002, 0x00000000,
			0x00000001, 0x00000000
	};

	protected static final Integer[] TEXTURE_PANNER = {
			0x0000004D, 0x00000001, 0x00000000,
			0x0000000A, 0x00000002, 0xFE363C85, 0x00000001,
			0x0000000A, 0x00000002, 0xFE363C86, 0x00000001,
			0x0000000A, 0x00000002, 0xFE363C87, 0x00000001,
			0x0000000A, 0x00000002, 0xFE363C88, 0x00000001,
			0x00000043, 0x00000001, null, // function ptr
			0x00000002, 0x00000000,
			0x00000013, 0x00000000,
			0x00000013, 0x00000000,
			0x00000013, 0x00000000,
			0x00000013, 0x00000000,
			0x00000043, 0x00000001, null, // function ptr
			0x00000002, 0x00000000,
			0x00000001, 0x00000000
	};

	protected static final Integer[] SEARCH_BUSH = {
			0x00000030, 0x00000001, 0xFE363C80,
			0x00000034, 0x00000004, 0xFE363C81, 0xFE363C82, 0xFE363C83, 0xFE363C84,
			0x00000043, 0x00000004, 0x802D1DFC, 0xFE363C85, 0xFE363C8F, 0xFE363C87,
			0x00000056, 0x00000000,
			0x00000024, 0x00000002, 0xFBD3E280, 0x00000000,
			0x0000000B, 0x00000002, 0xFE363C81, 0x00000000,
			0x00000005, 0x00000001, 0x00000005,
			0x00000030, 0x00000001, 0xFE363C81,
			0x00000031, 0x00000001, 0xFE363C82,
			0x00000005, 0x00000001, 0xFE363C82,
			0x00000031, 0x00000001, 0xFE363C83,
			0x00000043, 0x00000006, null, 0xFE363C83, 0xF24A7AE7, 0x00000001, 0xFE363C8F, 0x00000000,
			0x0000000A, 0x00000002, 0xFBD3E280, 0x00000000,
			0x00000024, 0x00000002, 0xFBD3E280, 0x00000001,
			0x00000043, 0x00000004, 0x802CA558, 0xFE363C83, 0x00000153, 0x00000000,
			0x00000013, 0x00000000,
			0x00000006, 0x00000000,
			0x00000008, 0x00000001, 0x00000001,
			0x00000030, 0x00000001, 0xFE363C81,
			0x00000031, 0x00000001, 0xFE363C82,
			0x00000005, 0x00000001, 0xFE363C82,
			0x00000031, 0x00000001, 0xFE363C83,
			0x00000043, 0x00000006, null, 0xFE363C83, 0xF24A7AE7, 0xFFFFFFFF, 0xFE363C8F, 0x00000000,
			0x00000006, 0x00000000,
			0x00000008, 0x00000001, 0x00000001,
			0x00000006, 0x00000000,
			0x00000030, 0x00000001, 0xFE363C81,
			0x00000031, 0x00000001, 0xFE363C82,
			0x00000005, 0x00000001, 0xFE363C82,
			0x00000031, 0x00000001, 0xFE363C83,
			0x00000043, 0x00000005, 0x802C8B60, 0xFE363C83, 0x00000000, 0x00000000, 0x00000000,
			0x00000006, 0x00000000,
			0x00000008, 0x00000001, 0x00000001,
			0x00000013, 0x00000000,
			0x00000057, 0x00000000,
			0x00000056, 0x00000000,
			0x0000000B, 0x00000002, 0xFE363C82, 0x00000000,
			0x00000030, 0x00000001, 0xFE363C82,
			0x00000031, 0x00000001, 0xFE363C83,
			0x00000005, 0x00000001, 0xFE363C83,
			0x00000031, 0x00000001, 0xFE363C84,
			0x00000033, 0x00000003, 0xFE363C85, 0xFE363C86, 0xFE363C87,
			0x00000033, 0x00000003, 0xFE363C88, 0xFE363C89, 0xFE363C8A,
			0x0000000A, 0x00000002, 0xFE363C8A, 0x00000000,
			0x00000043, 0x00000007, 0x802D6DC0, 0xFE363C84, 0xFE363C85, 0xFE363C86, 0xFE363C87, 0xFE363C88, 0xFE363C89,
			0x00000012, 0x00000000,
			0x00000043, 0x00000003, 0x802D593C, 0xFE363C8A, 0xFE363C8B,
			0x0000000A, 0x00000002, 0xFE363C8B, 0x00000000,
			0x00000043, 0x00000003, 0x802D58E0, 0xFE363C8A, 0x00000001,
			0x00000043, 0x00000007, 0x802D6DC0, 0xFE363C84, 0xFE363C85, 0xFE363C86, 0xFE363C87, 0xFE363C88, 0xFE363C89,
			0x00000013, 0x00000000,
			0x00000013, 0x00000000,
			0x00000006, 0x00000000,
			0x00000013, 0x00000000,
			0x00000057, 0x00000000,
			0x00000008, 0x00000001, 0x0000000F,
			0x0000000B, 0x00000002, 0xFE363C84, 0x00000000,
			0x00000046, 0x00000001, 0xFE363C84,
			0x00000013, 0x00000000,
			0x00000002, 0x00000000,
			0x00000001, 0x00000000
	};

	protected static final Integer[] NEW_SCRIPT = {
			0x00000030, 0x00000001, 0xFE363C80,
			0x00000034, 0x00000004, 0xFE363C81, 0xFE363C82, 0xFE363C83, 0xFE363C84,
			/*, that's all we need for uniqueness
			0x00000043, 0x00000004, 0x802D1DFC, 0xFE363C85, 0xFE363C8F, 0xFE363C87,
			0x00000056, 0x00000000,
			0x00000024, 0x00000002, 0xFBD3E280, 0x00000000,
			0x0000000B, 0x00000002, 0xFE363C81, 0x00000000,
			0x00000005, 0x00000001, 0x00000005,
			0x00000030, 0x00000001, 0xFE363C81,
			0x00000031, 0x00000001, 0xFE363C82,
			0x00000005, 0x00000001, 0xFE363C82,
			0x00000031, 0x00000001, 0xFE363C83,
			0x00000043, 0x00000006, null, 0xFE363C83, 0xF24A7AE7, 0x00000001, 0xFE363C8F, 0x00000000,
			0x0000000A, 0x00000002, 0xFBD3E280, 0x00000000,
			0x00000024, 0x00000002, 0xFBD3E280, 0x00000001,
			0x00000043, 0x00000004, 0x802CA558, 0xFE363C83, 0x00000153, 0x00000000,
			0x00000013, 0x00000000,
			0x00000006, 0x00000000,
			0x00000008, 0x00000001, 0x00000001,
			0x00000030, 0x00000001, 0xFE363C81,
			0x00000031, 0x00000001, 0xFE363C82,
			0x00000005, 0x00000001, 0xFE363C82,
			0x00000031, 0x00000001, 0xFE363C83,
			0x00000043, 0x00000006, null, 0xFE363C83, 0xF24A7AE7, 0xFFFFFFFF, 0xFE363C8F, 0x00000000,
			0x00000006, 0x00000000,
			0x00000008, 0x00000001, 0x00000001,
			0x00000006, 0x00000000,
			0x00000030, 0x00000001, 0xFE363C81,
			0x00000031, 0x00000001, 0xFE363C82,
			0x00000005, 0x00000001, 0xFE363C82,
			0x00000031, 0x00000001, 0xFE363C83,
			0x00000043, 0x00000005, 0x802C8B60, 0xFE363C83, 0x00000000, 0x00000000, 0x00000000,
			0x00000006, 0x00000000,
			0x00000008, 0x00000001, 0x00000001,
			0x00000013, 0x00000000,
			0x00000057, 0x00000000,
			0x00000056, 0x00000000,
			0x0000000B, 0x00000002, 0xFE363C82, 0x00000000,
			0x00000030, 0x00000001, 0xFE363C82,
			0x00000031, 0x00000001, 0xFE363C83,
			0x00000005, 0x00000001, 0xFE363C83,
			0x00000031, 0x00000001, 0xFE363C84,
			0x00000033, 0x00000003, 0xFE363C85, 0xFE363C86, 0xFE363C87,
			0x00000033, 0x00000003, 0xFE363C88, 0xFE363C89, 0xFE363C8A,
			0x0000000A, 0x00000002, 0xFE363C8A, 0x00000000,
			0x00000043, 0x00000007, 0x802D6DC0, 0xFE363C84, 0xFE363C85, 0xFE363C86, 0xFE363C87, 0xFE363C88, 0xFE363C89,
			0x00000012, 0x00000000,
			0x00000043, 0x00000003, 0x802D593C, 0xFE363C8A, 0xFE363C8B,
			0x0000000A, 0x00000002, 0xFE363C8B, 0x00000000,
			0x00000043, 0x00000003, 0x802D58E0, 0xFE363C8A, 0x00000001,
			0x00000043, 0x00000007, 0x802D6DC0, 0xFE363C84, 0xFE363C85, 0xFE363C86, 0xFE363C87, 0xFE363C88, 0xFE363C89,
			0x00000013, 0x00000000,
			0x00000013, 0x00000000,
			0x00000006, 0x00000000,
			0x00000013, 0x00000000,
			0x00000057, 0x00000000,
			0x00000008, 0x00000001, 0x0000000F,
			0x0000000B, 0x00000002, 0xFE363C84, 0x00000000,
			0x00000046, 0x00000001, 0xFE363C84,
			0x00000013, 0x00000000,
			0x00000002, 0x00000000,
			0x00000001, 0x00000000
			*/
	};

	protected static final Integer[] SHAKE_TREE = {
			0x0000004C, 0x00000001, 0xF24A8280,
			0x00000030, 0x00000001, 0xFE363C80,
			0x00000034, 0x00000004, 0xFE363C81, 0xFE363C82, 0xFE363C83, 0xFE363C84
			/*, that's all we need for uniqueness
			0x00000031, 0x00000001, 0xFE363C85,
			0x00000043, 0x00000004, 0x802D1DFC, 0xFE363C86, 0xFE363C8F, 0xFE363C88,
			0x00000043, 0x00000002, 0x802D6150, 0x00000165,
			0x00000043, 0x00000002, 0x802D6150, 0x00000166,
			0x00000056, 0x00000000,
			0x00000024, 0x00000002, 0xFBD3E280, 0x00000000,
			0x0000000B, 0x00000002, 0xFE363C81, 0x00000000,
			0x00000008, 0x00000001, 0x00000001,
			0x00000005, 0x00000001, 0x00000005,
			0x00000030, 0x00000001, 0xFE363C81,
			0x00000031, 0x00000001, 0xFE363C82,
			0x00000005, 0x00000001, 0xFE363C82,
			0x00000031, 0x00000001, 0xFE363C83,
			0x00000043, 0x00000006, null, 0xFE363C83, 0xF24A7AE7, 0xF24A7B4D, 0xFE363C8F, 0x00000000,
			0x0000000A, 0x00000002, 0xFBD3E280, 0x00000000,
			0x00000024, 0x00000002, 0xFBD3E280, 0x00000001,
			0x00000043, 0x00000004, 0x802CA558, 0xFE363C83, 0x00000166, 0x00000000,
			0x00000013, 0x00000000,
			0x00000006, 0x00000000,
			0x00000008, 0x00000001, 0x00000001,
			0x00000030, 0x00000001, 0xFE363C81,
			0x00000031, 0x00000001, 0xFE363C82,
			0x00000005, 0x00000001, 0xFE363C82,
			0x00000031, 0x00000001, 0xFE363C83,
			0x00000043, 0x00000006, null, 0xFE363C83, 0xF24A7AE7, 0xF24A79B4, 0xFE363C8F, 0x00000000,
			0x00000006, 0x00000000,
			0x00000008, 0x00000001, 0x00000001,
			0x00000006, 0x00000000,
			0x00000030, 0x00000001, 0xFE363C81,
			0x00000031, 0x00000001, 0xFE363C82,
			0x00000005, 0x00000001, 0xFE363C82,
			0x00000031, 0x00000001, 0xFE363C83,
			0x00000043, 0x00000005, 0x802C8B60, 0xFE363C83, 0x00000000, 0x00000000, 0x00000000,
			0x00000006, 0x00000000,
			0x00000008, 0x00000001, 0x00000001,
			0x00000013, 0x00000000,
			0x00000057, 0x00000000,
			0x00000056, 0x00000000,
			0x00000024, 0x00000002, 0xFBD3E280, 0x00000000,
			0x0000000B, 0x00000002, 0xFE363C82, 0x00000000,
			0x00000005, 0x00000001, 0x00000005,
			0x00000030, 0x00000001, 0xFE363C82,
			0x00000031, 0x00000001, 0xFE363C83,
			0x00000005, 0x00000001, 0xFE363C83,
			0x00000031, 0x00000001, 0xFE363C84,
			0x00000043, 0x00000006, null, 0xFE363C84, 0xF24A7AE7, 0xF24A7B4D, 0xFE363C8F, 0x00000000,
			0x0000000A, 0x00000002, 0xFBD3E280, 0x00000000,
			0x00000024, 0x00000002, 0xFBD3E280, 0x00000001,
			0x00000043, 0x00000004, 0x802CA558, 0xFE363C84, 0x00000165, 0x00000000,
			0x00000013, 0x00000000,
			0x00000006, 0x00000000,
			0x00000008, 0x00000001, 0x00000001,
			0x00000030, 0x00000001, 0xFE363C82,
			0x00000031, 0x00000001, 0xFE363C83,
			0x00000005, 0x00000001, 0xFE363C83,
			0x00000031, 0x00000001, 0xFE363C84,
			0x00000043, 0x00000006, null, 0xFE363C84, 0xF24A7AE7, 0xF24A79B4, 0xFE363C8F, 0x00000000,
			0x00000006, 0x00000000,
			0x00000008, 0x00000001, 0x00000001,
			0x00000006, 0x00000000,
			0x00000030, 0x00000001, 0xFE363C82,
			0x00000031, 0x00000001, 0xFE363C83,
			0x00000005, 0x00000001, 0xFE363C83,
			0x00000031, 0x00000001, 0xFE363C84,
			0x00000043, 0x00000005, 0x802C8B60, 0xFE363C84, 0x00000000, 0x00000000, 0x00000000,
			0x00000006, 0x00000000,
			0x00000008, 0x00000001, 0x00000001,
			0x00000013, 0x00000000,
			0x00000057, 0x00000000,
			0x00000056, 0x00000000,
			0x0000000B, 0x00000002, 0xFE363C83, 0x00000000,
			0x00000030, 0x00000001, 0xFE363C83,
			0x00000031, 0x00000001, 0xFE363C84,
			0x00000005, 0x00000001, 0xFE363C84,
			0x00000031, 0x00000001, 0xFE363C85,
			0x00000033, 0x00000003, 0xFE363C86, 0xFE363C87, 0xFE363C88,
			0x00000033, 0x00000003, 0xFE363C89, 0xFE363C8A, 0xFE363C8B,
			0x0000000A, 0x00000002, 0xFE363C8B, 0x00000000,
			0x00000043, 0x00000007, 0x802D6DC0, 0xFE363C85, 0xFE363C86, 0xFE363C87, 0xFE363C88, 0xFE363C89, 0xFE363C8A,
			0x00000012, 0x00000000,
			0x00000043, 0x00000003, 0x802D593C, 0xFE363C8B, 0xFE363C8C,
			0x0000000A, 0x00000002, 0xFE363C8C, 0x00000000,
			0x00000043, 0x00000003, 0x802D58E0, 0xFE363C8B, 0x00000001,
			0x00000043, 0x00000007, 0x802D6DC0, 0xFE363C85, 0xFE363C86, 0xFE363C87, 0xFE363C88, 0xFE363C89, 0xFE363C8A,
			0x00000013, 0x00000000,
			0x00000013, 0x00000000,
			0x00000006, 0x00000000,
			0x00000013, 0x00000000,
			0x00000057, 0x00000000,
			0x00000056, 0x00000000,
			0x0000000B, 0x00000002, 0xFE363C84, 0x00000000,
			0x00000030, 0x00000001, 0xFE363C84,
			0x00000031, 0x00000001, 0xFE363C85,
			0x00000005, 0x00000001, 0xFE363C85,
			0x00000033, 0x00000003, 0xFE363C86, 0xFE363C87, 0xFE363C88,
			0x00000043, 0x0000000F, 0x802D829C, 0x00000014, 0x00000000, 0xFE363C86, 0xFE363C87, 0xFE363C88, 0x00000064, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
			0x00000006, 0x00000000,
			0x00000013, 0x00000000,
			0x00000057, 0x00000000,
			0x0000000B, 0x00000002, 0xFE363C85, 0x00000000,
			0x00000046, 0x00000001, 0xFE363C85,
			0x00000013, 0x00000000,
			0x00000008, 0x00000001, 0x0000000F,
			0x00000002, 0x00000000,
			0x00000001, 0x00000000*/
	};
}
