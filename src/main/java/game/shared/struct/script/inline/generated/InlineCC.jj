/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. InlineCC.jj */
/*@egen*/
options {
	           
//	KEEP_LINE_COLUMN = false;
	STATIC=false;

  	                  
  	                         

	             
//	VISITOR_DATA_TYPE="BaseVisitorData";
//	VISITOR_RETURN_TYPE="BaseVisitorData";
}

PARSER_BEGIN(InlineParser)

package romdata.shared.struct.script.inline.generated;

public class InlineParser/*@bgen(jjtree)*/implements InlineParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTInlineParserState jjtree = new JJTInlineParserState();

/*@egen*/
	/** Main entry point. 
	public static void compile(String line)
	{
		System.out.println("Reading from standard input...");
		Example2 t = new Example2(System.in);
		try {
			ASTStart n = t.Start();
			n.dump("");
			System.out.println("Thank you.");
		} catch (Exception e) {
			System.out.println("Oops.");
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
	}
	*/
}

PARSER_END(InlineParser)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

TOKEN : /* LITERALS */
{
	< INTEGER_LITERAL:
	  <DECIMAL_LITERAL>
	| <HEX_LITERAL>
	>
|	< #DECIMAL_LITERAL: (["0"-"9"])+ ["`","'"] >
|	< #HEX_LITERAL: (["0"-"9","a"-"f","A"-"F"])+ >
|	<FLOAT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? >
|	< #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>
}

TOKEN : /* IDENTIFIERS */
{
	< CONSTANT: "." <IDENTIFIER> >
|	< VARIABLE: "*" <IDENTIFIER> ( "[" <INTEGER_LITERAL> "]" )? >
|	< POINTER: "$" <IDENTIFIER> >
|	< #IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|<SPECIAL>)* >
|	< #LETTER: ["_","a"-"z","A"-"Z"] >
|	< #DIGIT: ["0"-"9"] >
|	< #SPECIAL: [":","?"] >
}

TOKEN [IGNORE_CASE]: /* FUNCTIONS */
{
	<INT: "int">
|	<FLOAT: "float">
|	<MOD: "mod">
|	<SQUARE: "square">
}

ASTLine Line() : {/*@bgen(jjtree) Line */
  ASTLine jjtn000 = new ASTLine(JJTLINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Line */
        try {
/*@egen*/
	Expression() <EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Expression()       : {}
{
	ORExpression()
}

void ORExpression()                        : {/*@bgen(jjtree) #ChainedExpression(> 1) */
  ASTChainedExpression jjtn000 = new ASTChainedExpression(JJTCHAINEDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ChainedExpression(> 1) */
        try {
/*@egen*/
	ANDExpression()( "|" ANDExpression() { jjtn000.addOperator("|"); } )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
}

void ANDExpression()                        : {/*@bgen(jjtree) #ChainedExpression(> 1) */
  ASTChainedExpression jjtn000 = new ASTChainedExpression(JJTCHAINEDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ChainedExpression(> 1) */
        try {
/*@egen*/
	AdditiveExpression()( "&" AdditiveExpression() { jjtn000.addOperator("&"); } )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
}

void AdditiveExpression()                        :
{/*@bgen(jjtree) #ChainedExpression(> 1) */
  ASTChainedExpression jjtn000 = new ASTChainedExpression(JJTCHAINEDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token op = null; }
{/*@bgen(jjtree) #ChainedExpression(> 1) */
        try {
/*@egen*/
	MultiplicativeExpression()( ( op="+" | op="-" ) MultiplicativeExpression() { if(op != null) jjtn000.addOperator(op.image); } )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
}

void MultiplicativeExpression()                        :
{/*@bgen(jjtree) #ChainedExpression(> 1) */
  ASTChainedExpression jjtn000 = new ASTChainedExpression(JJTCHAINEDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token op = null; }
{/*@bgen(jjtree) #ChainedExpression(> 1) */
        try {
/*@egen*/
	UnaryExpression()( ( op="*" | op="/" ) UnaryExpression() { if(op != null) jjtn000.addOperator(op.image); } )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
}

void UnaryExpression()       : {}
{
	Negation()
|	BuiltInExpression()
}

/* casting/built-in functions */
void BuiltInExpression()       : {}
{
	Call()
|	PrimaryExpression()
}

void Negation()                 : {/*@bgen(jjtree) UnaryOperation */
  ASTUnaryOperation jjtn000 = new ASTUnaryOperation(JJTUNARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UnaryOperation */
        try {
/*@egen*/
	"-" BuiltInExpression()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setOperator("-"); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Call()       : {}
{
	"@"
	(	IntCast()
	|	FloatCast()
	|	SquareCall()
	|	ModCall()
	)
}

void IntCast()                 : {/*@bgen(jjtree) UnaryOperation */
  ASTUnaryOperation jjtn000 = new ASTUnaryOperation(JJTUNARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UnaryOperation */
        try {
/*@egen*/
	<INT> "(" Expression() ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setOperator("int"); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void FloatCast()                 : {/*@bgen(jjtree) UnaryOperation */
  ASTUnaryOperation jjtn000 = new ASTUnaryOperation(JJTUNARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UnaryOperation */
        try {
/*@egen*/
	<FLOAT> "(" Expression() ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setOperator("float"); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SquareCall()                 : {/*@bgen(jjtree) UnaryOperation */
  ASTUnaryOperation jjtn000 = new ASTUnaryOperation(JJTUNARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UnaryOperation */
        try {
/*@egen*/
	<SQUARE> "(" Expression() ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setOperator("square"); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ModCall()                  : {/*@bgen(jjtree) BinaryOperation */
  ASTBinaryOperation jjtn000 = new ASTBinaryOperation(JJTBINARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BinaryOperation */
        try {
/*@egen*/
	<MOD> "(" Expression() "," Expression() ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setOperator("%"); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PrimaryExpression()       : {}
{
	"(" Expression() ")" | Variable() | OffsetValue() | Integer() | Float()
}

void OffsetValue()                      : {/*@bgen(jjtree) #BinaryOperation(> 1) */
  ASTBinaryOperation jjtn000 = new ASTBinaryOperation(JJTBINARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryOperation(> 1) */
        try {
/*@egen*/
	( Constant() | Pointer() ) [ "[" Expression() "]" ]/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setOperator("+"); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
}

void Variable() :
{/*@bgen(jjtree) Variable */
  ASTVariable jjtn000 = new ASTVariable(JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Variable */
        try {
/*@egen*/
	t=<VARIABLE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setName(t.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Constant() :
{/*@bgen(jjtree) Constant */
  ASTConstant jjtn000 = new ASTConstant(JJTCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Constant */
        try {
/*@egen*/
	t=<CONSTANT>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setName(t.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Pointer() :
{/*@bgen(jjtree) Pointer */
  ASTPointer jjtn000 = new ASTPointer(JJTPOINTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Pointer */
        try {
/*@egen*/
	t=<POINTER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setName(t.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Integer() :
{/*@bgen(jjtree) Integer */
  ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Integer */
        try {
/*@egen*/
	t=<INTEGER_LITERAL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setValue(t.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Float() :
{/*@bgen(jjtree) Float */
  ASTFloat jjtn000 = new ASTFloat(JJTFLOAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Float */
        try {
/*@egen*/
	t=<FLOAT_LITERAL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setValue(t.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
