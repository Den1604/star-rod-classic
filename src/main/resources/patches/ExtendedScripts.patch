

#reserve 800 $TempBase
#reserve  40 $DebugBase

#define .TempVarStart		100	% 256` temp vars
#define .DynamicVarStart	200 % up to 1024` dynamic vars
#define .DebugVarStart		600
#define .DebugVarEnd		604 % 4 debug vars

/%
	Debug vars are a small global array connected
	with the debug details screen. When these values
	are set, they become visible there.
%/

% args: index
% returns: 0 = none, 1 = int, 2 = float
#export:Function $GetDebugValueType
{
	LI		V1, $DebugBase
	SLL		A0, A0, 3
	ADDU	V1, V1, A0
	JR		RA
	LW		V0, 4 (V1)
}

% args: index
% returns: value
#export:Function $GetDebugValue
{
	LI		V1, $DebugBase
	SLL		A0, A0, 3
	ADDU	V1, V1, A0
	JR		RA
	LW		V0, 0 (V1)
}

/%
	Dynamic vars are allocated as needed on the heap
	upon being used in get/set operations. They are
	implemented into normal variable system as 
	Var[200] through Var[300] as Dynamic[X].
%/

% when scripts are allocated 168 bytes, they get 170 *anyway* since heap
% allocations are always in units of 0x10. the following patches adjusting
% 168 -> 170 are just a formality.

#define .NewLength		170
#define .Fingerprint	AFBFCFDF

% ===================================================
% start_script (func_802C33E0)

@Function $start_script[58] % 802C3438
{
	LI		A0, .NewLength
}

@Hook $start_script[118] % 802C34F8
{
	SW		R0, 154 (S0)
	SW		R0, 158 (S0)
	LI		V1, .Fingerprint
	SW		V1, 168 (S0)
	J		802C33E0[120] % 802C3500
	SW		R0, 16C (S0)
}

% ===================================================
% start_script_in_group (func_802C35D0)

@Function $start_script_in_group[60] % 802C3630
{
	LI		A0, .NewLength
}

@Hook $start_script_in_group[11C] % 802C36EC
{
	SW		R0, 154 (S0)
	SW		R0, 158 (S0)
	LI		V0, .Fingerprint
	SW		V0, 168 (S0)
	J		802C35D0[124] % 802C36F4
	SW		R0, 16C (S0)
}

% ===================================================
% start_child_script (func_802C37C8)
% only used to implement ExecWait
% normally, vars and flags would be copied to this
% but the dynamic vars are only valid LOCALLY.

@Function $start_child_script[58] % 802C3820
{
	LI		A0, .NewLength
}

@Hook $start_child_script[150] % 802C3918
{
	SW		V0, 140 (S0)
	SW		R0, 158 (S0)
	LI		V0, .Fingerprint
	SW		V0, 168 (S0)
	J		802C37C8[158] % 802C3920
	SW		R0, 16C (S0)
}

% ===================================================
% make_thread (func_802C39F8)
% used by ChildThread (bytecode op 58) for inline child threads

@Function 802C39F8[58] % 802C3A50
{
	LI		A0, .NewLength
}

@Hook 802C39F8[13C] % 802C3B34
{
	SW		R0, 158 (S0)
	SW		V0, 140 (S0)
	LI		V0, .Fingerprint
	SW		V0, 168 (S0)
	J		802C39F8[144]
	SW		R0, 16C (S0)
}

% ===================================================
% kill_script (func_802C3F3C)

@Hook $kill_script[11C] % 802C4058
{
	LI		V0, .Fingerprint
	LW		V1, 168 (S2)
	BEQ		V0, V1, 8
	NOP
	LW		SP, 0 (R0) % force a crash
	LW		A0, 16C (S2)
	BEQ		A0, R0, .Done
	NOP
	JAL		8002AD2C % ~Func:heap_free
	NOP
	.Done
	LA		S1, 802DA890
	J		802C3F3C[124] % 802C4060
	RESERVED
}

% args = void* data, int new size
#new:Function $contextual_heap_realloc
{
	PUSH	RA
	COPY	A2, A1 % new size
	COPY	A1, A0 % data*
	LAW		V0, 8007419C
	LB		V0, 70 (V0)
	BEQ		V0, R0, .World
	NOP
	.Battle
	LA		A0, $Global_BattleHeap
	JAL		800292C4 % heap_realloc
	RESERVED
	B		.Done
	NOP
	.World
	LA		A0, $Global_WorldHeap
	JAL		800292C4 % heap_realloc
	RESERVED
	.Done
	JPOP	RA
}

% args = script*, index
% returns = pointer, boolean allocated|reallocated
#new:Function $GetDynamicVarPointer
{
	PUSH	RA, S0, S1, S2, S3, S4
	#DEF 	S0, *Script
	#DEF 	S1, *Index
	#DEF 	S2, *Base
	#DEF 	S3, *OldSize
	#DEF 	S4, *NewSize
	COPY	*Script, A0
	COPY	*Index, A1
	
	LI		V0, .Fingerprint
	LW		V1, 168 (*Script)
	BEQ		V0, V1, 8
	NOP
	LW		SP, 0 (R0) % force a crash

	LW		*Base, 16C (*Script)
	BEQ		*Base, R0, .Alloc
	NOP
	
	SLL		V1, *Index, 2
	LW		*OldSize, -C (*Base)
	BGE		V1, *OldSize, .Realloc
	NOP
	
	% var is in range
	B		.Done
	CLEAR	V1
	
	.Realloc
	ADDIU	V0, *Index, 4
	LI		V1, -4
	AND		V0, V0, V1
	SLL		*NewSize, V0, 2
	COPY	A0, *Base
	JAL		$contextual_heap_realloc
	COPY	A1, *NewSize
	COPY	*Base, V0
	ADDU	A0, *Base, *OldSize
	JAL		80064970 % bzero (void*,len)
	SUB		A1, *NewSize, *OldSize
	SW		*Base, 16C (*Script)
	B		.Done
	LI		V1, 1
	
	.Alloc
	ADDIU	V0, *Index, 4
	LI		V1, -4
	AND		V0, V0, V1
	SLL		*NewSize, V0, 2
	JAL		8002ACE4 % contextual_heap_malloc (len)
	COPY	A0, *NewSize
	COPY	*Base, V0
	COPY	A0, *Base
	JAL		80064970 % bzero (void*,len)
	COPY	A1, *NewSize
	SW		*Base, 16C (*Script)
	B		.Done
	LI		V1, 1
	
	.Done
	SLL		V0, *Index, 2
	ADDU	V0, V0, *Base
	#UNDEF	All
	JPOP	RA, S0, S1, S2, S3, S4
}

/%
	A set of temp variables is added for script expressions which are
	maintained as a static stack managed by the compiler. It is assumed
	that only one script uses the stack at a time. In other words, such
	operations are atomic from the POV of an executing script.
	The new set of Temp[X] variables are implemented into normal
	variable system as Var[100] through Var[200].
%/

% ===================================================
% func_802C7ABC : GetVariable
% 802C7ABC[294] --> 802C7D50 - D:801DB650 = EC700

@Hook 802C7ABC[294]	% 802C7D50
{
	ADDU	A1, A1, V0
	LI		V0, .TempVarStart
	BLT		A1, V0, .HandleNormalVar
	NOP
	LI		V0, .DynamicVarStart
	BLT		A1, V0, .HandleTempVar
	NOP
	LI		V0, .DebugVarStart
	BLT		A1, V0, .HandleDynamicVar
	NOP
	LI		V0, .DebugVarEnd
	BLT		A1, V0, .HandleDebugVar
	NOP
	LW		SP, 0 (R0) % force a crash
	
	.HandleDebugVar
	LI		V0, .DebugVarStart
	SUB		V0, A1, V0
	SLL		V0, V0, 3
	LI		A1, $DebugBase
	ADDU	V0, V0, A1
	J		802C7ABC[2E0] % return Debug[X]
	LW		V0, 0 (V0)
	
	.HandleDynamicVar
	LI		V0, .DynamicVarStart
	JAL		$GetDynamicVarPointer
	SUB		A1, A1, V0
	J		802C7ABC[2E0] % return Dynamic[X]
	LW		V0, 0 (V0)
	
	.HandleTempVar
	LI		V0, .TempVarStart
	SUB		V0, A1, V0
	SLL		V0, V0, 2
	LI		A1, $TempBase
	ADDU	V0, V0, A1
	J		802C7ABC[2E0] % return Temp[X]
	LW		V0, 0 (V0)
	
	.HandleNormalVar
	J		802C7ABC[29C]
	SLL		V0, A1, 2
}

% ===================================================
% func_802C8098 : SetVariable
% 802C8098[364] --> 802C83FC - D:801DB650 = ECDAC

@Hook 802C8098[364] % 802C83FC
{
	ADDU	S0, S0, V0
	LI		V0, .TempVarStart
	BLT		S0, V0, .HandleNormalVar
	NOP
	LI		V0, .DynamicVarStart
	BLT		S0, V0, .HandleTempVar
	NOP
	LI		V0, .DebugVarStart
	BLT		S0, V0, .HandleDynamicVar
	NOP
	LI		V0, .DebugVarEnd
	BLT		S0, V0, .HandleDebugVar
	NOP
	LW		SP, 0 (R0) % force a crash
	
	.HandleDebugVar
	LI		V0, .DebugVarStart
	SUB		V0, S0, V0
	SLL		V0, V0, 3
	LI		A1, $DebugBase
	ADDU	V0, V0, A1
	LI		V1, 1
	SW		V1, 4 (V0) % mark debug value as set
	LW		S1, 0 (V0)
	J		802C8098[378] % set Debug[X], return old value
	SW		S2, 0 (V0)
	
	.HandleDynamicVar
	LI		V0, .DynamicVarStart
	COPY	A0, A3
	JAL		$GetDynamicVarPointer
	SUB		A1, S0, V0
	LW		S1, 0 (V0)
	J		802C8098[378] % set Dynamic[X], return old value
	SW		S2, 0 (V0)
	
	.HandleTempVar
	LI		V0, .TempVarStart
	SUB		V0, S0, V0
	SLL		V0, V0, 2
	LI		A1, $TempBase
	ADDU	V0, V0, A1
	LW		S1, 0 (V0)
	J		802C8098[378] % set Temp[X], return old value
	SW		S2, 0 (V0)
	
	.HandleNormalVar
	J		802C8098[36C] % 802C8404
	SLL		V0, S0, 2
}

% ===================================================
% func_802C842C : GetFloatVariable
% 802C842C[1F0] --> 802C861C - D:801DB650 = ECFCC

% A0 has script_context*
@Hook 802C842C[1F0] % 802C861C
{
	ADDU	A1, A1, V0
	LI		V0, .TempVarStart
	BLT		A1, V0, .HandleNormalVar
	NOP
	LI		V0, .DynamicVarStart
	BLT		A1, V0, .HandleTempVar
	NOP
	LI		V0, .DebugVarStart
	BLT		A1, V0, .HandleDynamicVar
	NOP
	LI		V0, .DebugVarEnd
	BLT		A1, V0, .HandleDebugVar
	NOP
	LW		SP, 0 (R0) % force a crash
	
	.HandleDebugVar
	LI		V0, .DebugVarStart
	SUB		V0, A1, V0
	SLL		V0, V0, 3
	LI		A1, $DebugBase
	ADDU	V0, V0, A1
	J		802C842C[200] % return Debug[X]
	LW		A0, 0 (V0)
	
	.HandleDynamicVar
	LI		V0, .DynamicVarStart
	JAL		$GetDynamicVarPointer
	SUB		A1, A1, V0
	J		802C842C[200] % return Dynamic[X]
	LW		A0, 0 (V0)
	
	.HandleTempVar
	LI		V0, .TempVarStart
	SUB		V0, A1, V0
	SLL		V0, V0, 2
	LI		A1, $TempBase
	ADDU	V0, V0, A1
	J		802C842C[200] % return Temp[X]
	LW		A0, 0 (V0)
	
	.HandleNormalVar
	J		802C842C[1F8]
	SLL		V0, A1, 2
}

% ===================================================
% func_802C8640 : SetFloatVariable
% 802C8640[214] --> 802C8854 - D:801DB650 = ED204
@Hook 802C8640[214] % 802C8854
{
	ADDU	A1, A1, V0
	LI		V0, .TempVarStart
	BLT		A1, V0, .HandleNormalVar
	NOP
	LI		V0, .DynamicVarStart
	BLT		A1, V0, .HandleTempVar
	NOP
	LI		V0, .DebugVarStart
	BLT		A1, V0, .HandleDynamicVar
	NOP
	LI		V0, .DebugVarEnd
	BLT		A1, V0, .HandleDebugVar
	NOP
	LW		SP, 0 (R0) % force a crash
	
	.HandleDebugVar
	LI		V0, .DebugVarStart
	SUB		V0, A1, V0
	SLL		V0, V0, 3
	LIO		S0, $DebugBase
	JAL		802C496C % float_to_fixed_var
	ADDU	S0, S0, V0
	LI		V1, 2
	SW		V1, 4 (S0) % mark debug value as set
	LW		S2, 0 (S0)
	J		802C8640[22C] % set Temp[X], return old 
	SW		V0, 0 (S0)
	
	.HandleDynamicVar
	LI		V0, .DynamicVarStart
	COPY	A0, S1
	JAL		$GetDynamicVarPointer
	SUB		A1, A1, V0
	COPY	S0, V0
	JAL		802C496C % float_to_fixed_var
	NOP
	LW		S2, 0 (S0)
	J		802C8640[22C] % set Dynamic[X], return old 
	SW		V0, 0 (S0)
	
	.HandleTempVar
	LI		V0, .TempVarStart
	SUB		V0, A1, V0
	SLL		V0, V0, 2
	LIO		S0, $TempBase
	JAL		802C496C % float_to_fixed_var
	ADDU	S0, S0, V0
	LW		S2, 0 (S0)
	J		802C8640[22C] % set Temp[X], return old 
	SW		V0, 0 (S0)
	
	.HandleNormalVar
	J		802C8640[21C] % 802C885C
	SLL		S0, A1, 2
}
