/* Generated By:JJTree&JavaCC: Do not edit this line. InlineParser.java */
package game.shared.struct.script.inline.generated;

public class InlineParser/*@bgen(jjtree)*/ implements InlineParserTreeConstants, InlineParserConstants
{/*@bgen(jjtree)*/
	protected JJTInlineParserState jjtree = new JJTInlineParserState();

	final public ASTLine Line() throws ParseException
	{
		/*@bgen(jjtree) Line */
		ASTLine jjtn000 = new ASTLine(JJTLINE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			Expression();
			jj_consume_token(0);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{
				if (true)
					return jjtn000;
			}
		}
		catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			}
			else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true)
						throw (ParseException) jjte000;
				}
			}
			{
				if (true)
					throw (Error) jjte000;
			}
		}
		finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public void Expression() throws ParseException
	{
		ORExpression();
	}

	final public void ORExpression() throws ParseException
	{
		/*@bgen(jjtree) #ChainedExpression(> 1) */
		ASTChainedExpression jjtn000 = new ASTChainedExpression(JJTCHAINEDEXPRESSION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			ANDExpression();
			label_1:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case 21:
						;
						break;
					default:
						jj_la1[0] = jj_gen;
						break label_1;
				}
				jj_consume_token(21);
				ANDExpression();
				jjtn000.addOperator("|");
			}
		}
		catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			}
			else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true)
						throw (ParseException) jjte000;
				}
			}
			{
				if (true)
					throw (Error) jjte000;
			}
		}
		finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
			}
		}
	}

	final public void ANDExpression() throws ParseException
	{
		/*@bgen(jjtree) #ChainedExpression(> 1) */
		ASTChainedExpression jjtn000 = new ASTChainedExpression(JJTCHAINEDEXPRESSION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			AdditiveExpression();
			label_2:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case 22:
						;
						break;
					default:
						jj_la1[1] = jj_gen;
						break label_2;
				}
				jj_consume_token(22);
				AdditiveExpression();
				jjtn000.addOperator("&");
			}
		}
		catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			}
			else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true)
						throw (ParseException) jjte000;
				}
			}
			{
				if (true)
					throw (Error) jjte000;
			}
		}
		finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
			}
		}
	}

	final public void AdditiveExpression() throws ParseException
	{
		/*@bgen(jjtree) #ChainedExpression(> 1) */
		ASTChainedExpression jjtn000 = new ASTChainedExpression(JJTCHAINEDEXPRESSION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		Token op = null;
		try {
			MultiplicativeExpression();
			label_3:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case 23:
					case 24:
						;
						break;
					default:
						jj_la1[2] = jj_gen;
						break label_3;
				}
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case 23:
						op = jj_consume_token(23);
						break;
					case 24:
						op = jj_consume_token(24);
						break;
					default:
						jj_la1[3] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
				MultiplicativeExpression();
				if (op != null)
					jjtn000.addOperator(op.image);
			}
		}
		catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			}
			else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true)
						throw (ParseException) jjte000;
				}
			}
			{
				if (true)
					throw (Error) jjte000;
			}
		}
		finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
			}
		}
	}

	final public void MultiplicativeExpression() throws ParseException
	{
		/*@bgen(jjtree) #ChainedExpression(> 1) */
		ASTChainedExpression jjtn000 = new ASTChainedExpression(JJTCHAINEDEXPRESSION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		Token op = null;
		try {
			UnaryExpression();
			label_4:
			while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case 25:
					case 26:
						;
						break;
					default:
						jj_la1[4] = jj_gen;
						break label_4;
				}
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case 25:
						op = jj_consume_token(25);
						break;
					case 26:
						op = jj_consume_token(26);
						break;
					default:
						jj_la1[5] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
				}
				UnaryExpression();
				if (op != null)
					jjtn000.addOperator(op.image);
			}
		}
		catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			}
			else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true)
						throw (ParseException) jjte000;
				}
			}
			{
				if (true)
					throw (Error) jjte000;
			}
		}
		finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
			}
		}
	}

	final public void UnaryExpression() throws ParseException
	{
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case 24:
				Negation();
				break;
			case INTEGER_LITERAL:
			case FLOAT_LITERAL:
			case CONSTANT:
			case VARIABLE:
			case POINTER:
			case 27:
			case 28:
				BuiltInExpression();
				break;
			default:
				jj_la1[6] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
		}
	}

	/* casting/built-in functions */
	final public void BuiltInExpression() throws ParseException
	{
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case 27:
				Call();
				break;
			case INTEGER_LITERAL:
			case FLOAT_LITERAL:
			case CONSTANT:
			case VARIABLE:
			case POINTER:
			case 28:
				PrimaryExpression();
				break;
			default:
				jj_la1[7] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
		}
	}

	final public void Negation() throws ParseException
	{
		/*@bgen(jjtree) UnaryOperation */
		ASTUnaryOperation jjtn000 = new ASTUnaryOperation(JJTUNARYOPERATION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(24);
			BuiltInExpression();
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			jjtn000.setOperator("-");
		}
		catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			}
			else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true)
						throw (ParseException) jjte000;
				}
			}
			{
				if (true)
					throw (Error) jjte000;
			}
		}
		finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	final public void Call() throws ParseException
	{
		jj_consume_token(27);
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case INT:
				IntCast();
				break;
			case FLOAT:
				FloatCast();
				break;
			case SQUARE:
				SquareCall();
				break;
			case MOD:
				ModCall();
				break;
			default:
				jj_la1[8] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
		}
	}

	final public void IntCast() throws ParseException
	{
		/*@bgen(jjtree) UnaryOperation */
		ASTUnaryOperation jjtn000 = new ASTUnaryOperation(JJTUNARYOPERATION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(INT);
			jj_consume_token(28);
			Expression();
			jj_consume_token(29);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			jjtn000.setOperator("int");
		}
		catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			}
			else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true)
						throw (ParseException) jjte000;
				}
			}
			{
				if (true)
					throw (Error) jjte000;
			}
		}
		finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	final public void FloatCast() throws ParseException
	{
		/*@bgen(jjtree) UnaryOperation */
		ASTUnaryOperation jjtn000 = new ASTUnaryOperation(JJTUNARYOPERATION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(FLOAT);
			jj_consume_token(28);
			Expression();
			jj_consume_token(29);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			jjtn000.setOperator("float");
		}
		catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			}
			else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true)
						throw (ParseException) jjte000;
				}
			}
			{
				if (true)
					throw (Error) jjte000;
			}
		}
		finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	final public void SquareCall() throws ParseException
	{
		/*@bgen(jjtree) UnaryOperation */
		ASTUnaryOperation jjtn000 = new ASTUnaryOperation(JJTUNARYOPERATION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(SQUARE);
			jj_consume_token(28);
			Expression();
			jj_consume_token(29);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			jjtn000.setOperator("square");
		}
		catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			}
			else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true)
						throw (ParseException) jjte000;
				}
			}
			{
				if (true)
					throw (Error) jjte000;
			}
		}
		finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	final public void ModCall() throws ParseException
	{
		/*@bgen(jjtree) BinaryOperation */
		ASTBinaryOperation jjtn000 = new ASTBinaryOperation(JJTBINARYOPERATION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(MOD);
			jj_consume_token(28);
			Expression();
			jj_consume_token(30);
			Expression();
			jj_consume_token(29);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			jjtn000.setOperator("%");
		}
		catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			}
			else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true)
						throw (ParseException) jjte000;
				}
			}
			{
				if (true)
					throw (Error) jjte000;
			}
		}
		finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	final public void PrimaryExpression() throws ParseException
	{
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case 28:
				jj_consume_token(28);
				Expression();
				jj_consume_token(29);
				break;
			case VARIABLE:
				Variable();
				break;
			case CONSTANT:
			case POINTER:
				OffsetValue();
				break;
			case INTEGER_LITERAL:
				Integer();
				break;
			case FLOAT_LITERAL:
				Float();
				break;
			default:
				jj_la1[9] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
		}
	}

	final public void OffsetValue() throws ParseException
	{
		/*@bgen(jjtree) #BinaryOperation(> 1) */
		ASTBinaryOperation jjtn000 = new ASTBinaryOperation(JJTBINARYOPERATION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case CONSTANT:
					Constant();
					break;
				case POINTER:
					Pointer();
					break;
				default:
					jj_la1[10] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
			}
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case 31:
					jj_consume_token(31);
					Expression();
					jj_consume_token(32);
					break;
				default:
					jj_la1[11] = jj_gen;
					;
			}
			jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
			jjtc000 = false;
			jjtn000.setOperator("+");
		}
		catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			}
			else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true)
						throw (ParseException) jjte000;
				}
			}
			{
				if (true)
					throw (Error) jjte000;
			}
		}
		finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
			}
		}
	}

	final public void Variable() throws ParseException
	{
		/*@bgen(jjtree) Variable */
		ASTVariable jjtn000 = new ASTVariable(JJTVARIABLE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		Token t;
		try {
			t = jj_consume_token(VARIABLE);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			jjtn000.setName(t.image);
		}
		finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	final public void Constant() throws ParseException
	{
		/*@bgen(jjtree) Constant */
		ASTConstant jjtn000 = new ASTConstant(JJTCONSTANT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		Token t;
		try {
			t = jj_consume_token(CONSTANT);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			jjtn000.setName(t.image);
		}
		finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	final public void Pointer() throws ParseException
	{
		/*@bgen(jjtree) Pointer */
		ASTPointer jjtn000 = new ASTPointer(JJTPOINTER);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		Token t;
		try {
			t = jj_consume_token(POINTER);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			jjtn000.setName(t.image);
		}
		finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	final public void Integer() throws ParseException
	{
		/*@bgen(jjtree) Integer */
		ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		Token t;
		try {
			t = jj_consume_token(INTEGER_LITERAL);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			jjtn000.setValue(t.image);
		}
		finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	final public void Float() throws ParseException
	{
		/*@bgen(jjtree) Float */
		ASTFloat jjtn000 = new ASTFloat(JJTFLOAT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		Token t;
		try {
			t = jj_consume_token(FLOAT_LITERAL);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			jjtn000.setValue(t.image);
		}
		finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	/** Generated Token Manager. */
	public InlineParserTokenManager token_source;
	SimpleCharStream jj_input_stream;
	/** Current token. */
	public Token token;
	/** Next token. */
	public Token jj_nt;
	private int jj_ntk;
	private int jj_gen;
	final private int[] jj_la1 = new int[12];
	static private int[] jj_la1_0;
	static private int[] jj_la1_1;
	static {
		jj_la1_init_0();
		jj_la1_init_1();
	}

	private static void jj_la1_init_0()
	{
		jj_la1_0 = new int[] { 0x200000, 0x400000, 0x1800000, 0x1800000, 0x6000000, 0x6000000, 0x19001d20, 0x18001d20, 0x1e0000, 0x10001d20, 0x1400,
				0x80000000, };
	}

	private static void jj_la1_init_1()
	{
		jj_la1_1 = new int[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, };
	}

	/** Constructor with InputStream. */
	public InlineParser(java.io.InputStream stream)
	{
		this(stream, null);
	}

	/** Constructor with InputStream and supplied encoding */
	public InlineParser(java.io.InputStream stream, String encoding)
	{
		try {
			jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
		}
		catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new InlineParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 12; i++)
			jj_la1[i] = -1;
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream)
	{
		ReInit(stream, null);
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream, String encoding)
	{
		try {
			jj_input_stream.ReInit(stream, encoding, 1, 1);
		}
		catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 12; i++)
			jj_la1[i] = -1;
	}

	/** Constructor. */
	public InlineParser(java.io.Reader stream)
	{
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new InlineParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 12; i++)
			jj_la1[i] = -1;
	}

	/** Reinitialise. */
	public void ReInit(java.io.Reader stream)
	{
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 12; i++)
			jj_la1[i] = -1;
	}

	/** Constructor with generated Token Manager. */
	public InlineParser(InlineParserTokenManager tm)
	{
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 12; i++)
			jj_la1[i] = -1;
	}

	/** Reinitialise. */
	public void ReInit(InlineParserTokenManager tm)
	{
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 12; i++)
			jj_la1[i] = -1;
	}

	private Token jj_consume_token(int kind) throws ParseException
	{
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	/** Get the next Token. */
	final public Token getNextToken()
	{
		if (token.next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	/** Get the specific Token. */
	final public Token getToken(int index)
	{
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		}
		return t;
	}

	private int jj_ntk()
	{
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	private java.util.List<int[]> jj_expentries = new java.util.ArrayList<>();
	private int[] jj_expentry;
	private int jj_kind = -1;

	/** Generate ParseException. */
	public ParseException generateParseException()
	{
		jj_expentries.clear();
		boolean[] la1tokens = new boolean[33];
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 12; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
					if ((jj_la1_1[i] & (1 << j)) != 0) {
						la1tokens[32 + j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 33; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.add(jj_expentry);
			}
		}
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = jj_expentries.get(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	/** Enable tracing. */
	final public void enable_tracing()
	{}

	/** Disable tracing. */
	final public void disable_tracing()
	{}

	/** Main entry point.
	public static void compile(String line)
	{
	System.out.println("Reading from standard input...");
	Example2 t = new Example2(System.in);
	try {
		ASTStart n = t.Start();
		n.dump("");
		System.out.println("Thank you.");
	} catch (Exception e) {
		System.out.println("Oops.");
		System.out.println(e.getMessage());
		e.printStackTrace();
	}
	}
	*/
}
